<%- include('../partials/led/header') %>
<main>
  <div class="container mt-5">
    <section class="wait">
      <div class="row">
        <div class="col-md-7">
          <img src="/assets/Getreadycolor.svg" alt="" class="img-fluid" />
          <p class="text-white">
            Please scan or type link on the table and enter your Team Name
          </p>
        </div>
        <div class="col-md-5">
          <div class="row">
            <div class="col-md-12">
              <div class="card rounded p-1">
                <div class="card-body p-2">
                  <h5 class="text-center text-sm mt-1">Welcome Team</h5>

                  <div id="seat-container" class="row g-1"></div>
                  <!-- Mengurangi gutter -->
                  <p class="total-join text-center fs-6 mt-1">
                    <!-- Mengurangi ukuran font -->
                    <span id="joined-count" class="fw-bold fs-5">0</span>
                    Teams Joined
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <section class="quiz">
      <div id="questionIndex" class="text-white"></div>
      <div id="question" class="text-center h2 text-white"></div>
      <div class="row justify-content-center">
        <div class="col-md-12">
          <div id="options"></div>
        </div>
      </div>
      <div class="fund mt-3">
        <h3 class="text-white">The Team Has Answered</h3>
        <h2 class="fund-box" id="total-votes">0</h2>
      </div>
    </section>
    <section class="leaderboard" style="display: none">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <h1 class="text-white">Leaderboard</h1>
          <div class="table-responsif mt-3">
            <table class="table">
              <tbody id="list-tim"></tbody>
            </table>
          </div>
        </div>
      </div>
    </section>
    <section class="tieBreakerQuiz" style="display: none">
      <div id="questionIndexTie" class="text-white"></div>
      <div id="questionTie" class="text-center h2 text-white"></div>
      <div class="row justify-content-center">
        <div class="col-md-6">
          <div id="optionsTie" class="row mt-3"></div>
        </div>
      </div>
      <div class="fundTie mt-5">
        <h3 class="text-white">The Team Has Answered</h3>
        <h2 class="fund-boxTie" id="total-votesTie">0</h2>
      </div>
    </section>
    <section class="newleaderboard" style="display: none">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <h1 class="text-white">Leaderboard</h1>
          <div class="table-responsif mt-3">
            <table class="table">
              <tbody id="list-tie-breaker"></tbody>
            </table>
          </div>
        </div>
      </div>
    </section>
  </div>
</main>

<script>
  let question;
  let currentIndex = 0;
  const maxSeats = 30;
  const seatsPerRow = 3;
  const seatContainer = document.getElementById("seat-container");

  for (let i = 0; i < maxSeats; i++) {
    if (i % seatsPerRow === 0) {
      // Buat baris baru setiap 3 kursi
      const row = document.createElement("div");
      row.className = "row justify-content-center g-2";
      seatContainer.appendChild(row);
    }

    const seat = document.createElement("div");
    seat.className = "col-4 text-center seat"; // 3 kolom per baris
    seat.setAttribute("data-index", i);
    seat.innerHTML = `<div class="p-3 border rounded-pill border-success bg-white seat-box fw-bold" style="font-size: 16px;">Team ${
      i + 1
    }</div>`;

    seatContainer.lastChild.appendChild(seat);
  }

  const socket = io("wss://scpvbportfoliogame.com/", {
  // const socket = io("http://192.168.88.116:3000", {
    transports: ["websocket"],
    query: {
      userId: "host", // ID tetap
      role: "host",
    },
  });

  console.log("Menunggu event gameReset...");
  socket.on("gameReset", () => {
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  });

  const formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: "SGD",
    currencyDisplay: "symbol",
  });

  socket.on("TeamLeave", (namatim) => {
    console.log(`${namatim} left`);

    fetch("/updatetim", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        teamName: namatim,
      }),
    })
      .then((response) => response.json())
      .then((data) => console.log(data))
      .catch((error) => console.error("Error:", error));
  });

  // start first quiz leaderboard

  let votes = {};

  socket.on("questioninLeaderboard", (data) => {
    votes = {}; // Reset votes di frontend
    document.getElementById("total-votes").innerText = "0"; // Reset total votes tampilan
    document.querySelector(".wait").style.display = "none";
    const questionIndexDiv = document.getElementById("questionIndex");
    questionIndexDiv.innerText = `Scenario : ${data.id}`;
    questionIndexDiv.classList.add("h3", "text-center");

    document.getElementById("question").innerText = data.question;
    const optionsDiv = document.getElementById("options");
    optionsDiv.innerHTML = "";
    optionsDiv.classList.add(
      "d-flex",
      "flex-row",
      "flex-wrap", // Agar tetap rapi jika opsi terlalu banyak
      "justify-content-center",
      "gap-3",
      "mt-3"
    );

    data.options.forEach((opt) => {
      const optionContainer = document.createElement("div");
      optionContainer.classList.add("option-container", "mb-3", "text-center");

      const img = document.createElement("img");
      img.src = opt.image; // Gunakan URL dari JSON
      img.alt = opt.text;
      img.classList.add("img-fluid","bg-white","rounded");

      // Buat tombol opsi
      const btn = document.createElement("button");
      btn.innerText = opt.text; // Ambil teks dari objek option

      btn.classList.add("btn", "btn-primary", "w-100");

      const voteCount = document.createElement("button");
      voteCount.id = `votes-${opt.value}`;
      voteCount.classList.add("btn", "vote-count", "w-100");
      voteCount.innerText = "Votes: 0";

      optionContainer.appendChild(img);
      optionContainer.appendChild(btn);
      optionContainer.appendChild(voteCount);
      optionsDiv.appendChild(optionContainer);
    });
    socket.emit("resetVotes");
  });

  socket.on("updateVotes", (votes) => {
    Object.entries(votes).forEach(([optionValue, count]) => {
      const voteElem = document.getElementById(`votes-${optionValue}`);
      if (voteElem) voteElem.innerText = `Votes: ${count}`;
    });
  });

  socket.on("totalVotes", (total) => {
    document.getElementById("total-votes").innerText = total;
  });

  socket.on("endinLeaderboard", () => {
    document.querySelector(".quiz").style.display = "none";
    document.querySelector(".leaderboard").style.display = "block";
  });

  socket.on("showQuestion", () => {
    document.querySelector(".quiz").style.display = "block";
    document.querySelector(".leaderboard").style.display = "none";
  });

  socket.on("showLeaderboard", () => {
    document.querySelector(".quiz").style.display = "none";
    document.querySelector(".leaderboard").style.display = "block";
  });

  socket.on("updateTeams", (Teams) => {
    console.log("Updated teams:", Teams);

    const seats = document.querySelectorAll(".seat-box");

    // Reset semua kursi ke warna putih
    seats.forEach((seat, index) => {
      // seat.innerText = index + 1;
      seat.classList.remove("bg-primary", "text-white");
      seat.classList.add("bg-white");
    });

    // Update kursi sesuai tim yang telah bergabung
    Object.values(Teams).forEach((team, index) => {
      if (index < maxSeats) {
        seats[index].innerText = team.name;
        seats[index].classList.remove("bg-white");
        seats[index].classList.add("bg-primary", "text-white");
      }
    });

    // Update jumlah tim yang telah join
    document.getElementById("joined-count").innerText =
      Object.keys(Teams).length;
  });

  socket.on("updateTeams", (Teams) => {
    const listTim = document.getElementById("list-tim");
    listTim.innerHTML = "";
    Object.values(Teams)
      .sort((a, b) => b.fund - a.fund)
      .forEach((team, index) => {
        const rowClass = index < 5 ? "custom-green" : "custom-blue"; // 5 teratas hijau, lainnya biru
        const row = document.createElement("tr");
        row.classList.add(rowClass);
        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${team.name}</td>
          <td>${team.fund.toLocaleString("id-ID")}</td>
        `;
        listTim.appendChild(row);
      });
  });

  // end first quiz leaderboard

  socket.on("questionTieinLeaderboard", (data) => {
    console.log("Menerima pertanyaan tie-breaker:", data);
    votes = {}; // Reset votes di frontend
    document.getElementById("total-votesTie").innerText = "0"; // Reset total votes tampilan
    document.querySelector(".leaderboard").style.display = "none";
    document.querySelector(".tieBreakerQuiz").style.display = "block";
    const questionTieIndexDiv = document.getElementById("questionIndexTie");
    questionTieIndexDiv.innerText = `(QUESTION : ${data.id})`;
    questionTieIndexDiv.classList.add("h3", "text-center");

    document.getElementById("questionTie").innerText = data.question;
    const optionsTieDiv = document.getElementById("optionsTie");
    optionsTieDiv.innerHTML = "";

    data.options.forEach((opt) => {
      const optionTieCard = document.createElement("div");
      optionTieCard.className = "col-md-6 mb-2";
      optionTieCard.innerHTML = `
      <div class="card">
        <div class="card-body text-center">
          <h5>${opt.text}</h5>
          <div id="votes-${opt.value}" class="mt-2 text-success">Votes: 0</div>
        </div>
      </div>`;
      optionsTieDiv.appendChild(optionTieCard);
    });
    socket.emit("resetVotes");
  });

  socket.on("endTieinLeaderboard", () => {
    document.querySelector(".tieBreakerQuiz").style.display = "none";
    document.querySelector(".newleaderboard").style.display = "block";
  });

  socket.on("updateTeams", (Teams) => {
    const listFinalTim = document.getElementById("list-tie-breaker");
    listFinalTim.innerHTML = "";
    Object.values(Teams)
      .sort((a, b) => b.fund - a.fund)
      .forEach((team, index) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${team.name}</td>
          <td>${team.fund.toLocaleString("id-ID")}</td>
          <td>${team.point}</td>
        `;
        listFinalTim.appendChild(row);
      });
  });
</script>

<%- include('../partials/led/footer') %>
