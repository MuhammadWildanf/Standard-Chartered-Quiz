<%- include('../partials/led/header') %>
<main>
  <div class="container mt-5">
    <section class="wait">
      <div class="row">
        <div class="col-md-6">
          <h1 class="text-white">Get Ready for Portfolio Game</h1>
          <p class="text-white">
            Please scan or type link on the table and enter your Team Name
          </p>
        </div>
        <div class="col-md-6">
          <div class="card">
            <div class="card-title">
              <h3 class="text-center">Welcome Team</h3>
            </div>
            <div class="card-body">
              <div id="seat-container" class="row g-2"></div>
              <p class="total-join text-center fs-4 mt-3">
                <span id="joined-count" class="fw-bold fs-3">0</span> / 30 Teams
                Joined
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
    <section class="quiz">
      <div id="questionIndex" class="text-white"></div>
      <div id="question" class="text-center h2 text-white"></div>
      <div class="row justify-content-center">
        <div class="col-md-6">
          <div id="options" class="row mt-3"></div>
        </div>
      </div>
    </section>
    <section class="leaderboard" style="display: none">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <h1 class="text-white">Leaderboard</h1>
          <div class="card shadow rounded">
            <div class="card-body">
              <div class="table-responsif mt-3">
                <table class="table">
                  <tbody id="list-tim"></tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</main>

<script>
  let question;
  let currentIndex = 0;
  const maxSeats = 30;
  const seatsPerRow = 3;
  const seatContainer = document.getElementById("seat-container");

  for (let i = 0; i < maxSeats; i++) {
    if (i % seatsPerRow === 0) {
      // Buat baris baru setiap 3 kursi
      const row = document.createElement("div");
      row.className = "row justify-content-center g-2";
      seatContainer.appendChild(row);
    }

    const seat = document.createElement("div");
    seat.className = "col-md-4 text-center seat"; // 3 kolom per baris
    seat.setAttribute("data-index", i);
    seat.innerHTML = `<div class="p-3 border rounded border-success text-success bg-white seat-box fw-bold" style="font-size: 16px;">Team ${
      i + 1
    }</div>`;

    seatContainer.lastChild.appendChild(seat);
  }

  const socket = io("http://localhost:3000", {
    query: {
      userId: "host", // ID tetap
      role: "host",
    },
  });

  const formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: "SGD",
    currencyDisplay: "symbol",
  });

  socket.on("TeamLeave", (namatim) => {
    console.log(`${namatim} left`);

    fetch("/updatetim", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ teamName: namatim }),
    })
      .then((response) => response.json())
      .then((data) => console.log(data))
      .catch((error) => console.error("Error:", error));
  });

  socket.on("questioninLeaderboard", (data) => {
    document.querySelector(".wait").style.display = "none";
    const questionIndexDiv = document.getElementById("questionIndex");
    questionIndexDiv.innerText = `(QUESTION : ${data.id})`;
    questionIndexDiv.classList.add("h3", "text-center");

    document.getElementById("question").innerText = data.question;
    const optionsDiv = document.getElementById("options");
    optionsDiv.innerHTML = "";

    data.options.forEach((opt) => {
      const optionCard = document.createElement("div");
      optionCard.className = "col-md-6 mb-2";
      optionCard.innerHTML = `
      <div class="card">
        <div class="card-body text-center">
          <h5>${opt.text}</h5>
          <div id="votes-${opt.value}" class="mt-2 text-success">Votes: 0</div>
        </div>
      </div>`;
      optionsDiv.appendChild(optionCard);
    });
  });

  socket.on("updateVotes", (votes) => {
    Object.entries(votes).forEach(([optionValue, count]) => {
      const voteElem = document.getElementById(`votes-${optionValue}`);
      if (voteElem) voteElem.innerText = `Votes: ${count}`;
    });
  });

  socket.on("endinLeaderboard", () => {
    document.querySelector(".quiz").style.display = "none";
    document.querySelector(".leaderboard").style.display = "block";
  });

  socket.on("updateTeams", (Teams) => {
    console.log("Updated teams:", Teams);

    const seats = document.querySelectorAll(".seat-box");

    // Reset semua kursi ke warna putih
    seats.forEach((seat, index) => {
      // seat.innerText = index + 1;
      seat.classList.remove("bg-primary", "text-white");
      seat.classList.add("bg-white");
    });

    // Update kursi sesuai tim yang telah bergabung
    Object.values(Teams).forEach((team, index) => {
      if (index < maxSeats) {
        seats[index].innerText = team.name;
        seats[index].classList.remove("bg-white");
        seats[index].classList.add("bg-primary", "text-white");
      }
    });

    // Update jumlah tim yang telah join
    document.getElementById("joined-count").innerText =
      Object.keys(Teams).length;
  });

  socket.on("updateTeams", (Teams) => {
    const listTim = document.getElementById("list-tim");
    listTim.innerHTML = "";
    Object.values(Teams)
      .sort((a, b) => b.fund - a.fund)
      .forEach((team, index) => {
        listTim.innerHTML += `<tr>
      <td>${index + 1}</td>
      <td>${team.name}</td>
      <td>${team.fund.toLocaleString("id-ID")}</td>
    </tr>`;
      });
  });
</script>

<%- include('../partials/led/footer') %>
