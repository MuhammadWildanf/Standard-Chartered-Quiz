<%- include('../partials/client/header') %>
<main>
  <div
    class="wrapper d-flex align-items-center justify-content-center"
    style="height: 85vh"
  >
    <div
      class="d-flex flex-column align-items-center"
      style="margin-top: -140px"
    >
      <section class="wait text-center">
        <h2 class="text-white">
          Welcome, Team <strong><%= namatim %>,</strong>
        </h2>
        <h2 id="credit"></h2>
      </section>
      <section class="quiz" style="display: none">
        <div class="fund mb-2">
          <h3 class="text-white">Your Fund:</h3>
          <h2 id="teamFundDisplay" class="fund-box"></h2>
        </div>
        <div id="questionIndex"></div>
        <div id="question"></div>
        <div class="row d-flex justify-content-center">
          <div class="col-md-12">
            <div id="options"></div>
          </div>
        </div>
      </section>
      <section class="end" style="display: none">
        <div class="congrats"></div>
      </section>
      <section class="tiebreaker" style="display: none">
        <!-- <div id="timer" class="h4 text-center text-danger mt-3"></div> -->
        <div id="questiontieIndex"></div>
        <div id="questiontie"></div>
        <div class="row justify-content-center">
          <div class="col-md-6">
            <div id="optionstie"></div>
          </div>
        </div>
      </section>
      <section class="endtie" style="display: none">
        <div class="congratstie"></div>
      </section>
    </div>
  </div>
</main>

<script>
  var namatim = "<%= namatim %>";
  let fund = 1000000;
  let question;

  const formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: "SGD",
    currencyDisplay: "symbol",
  });

  document.getElementById(
    "credit"
  ).innerHTML = `<p style="color: white">Congratulations! You've got</p><br> <h1 style="font-weight: 650; font-size: 50px; color: #38D200;"><strong>S${formatter.format(
    fund
  )}</strong> </h1><br><p style="color: white">Initial Balance</p>`;

  const socket = io("wss://scpvbportfoliogame.com/", {
  // const socket = io("http://192.168.88.116:3000", {
    transports: ["websocket"],
    query: {
      userId: namatim, // ID tetap
      role: "user",
    },
  });

  const changeSection = (from, to) => {
    gsap.to(from, {
      duration: 0.5,
      opacity: 0,
      scale: 0.9,
      onComplete: () => {
        from.style.display = "none"; // Sembunyikan elemen yang lama
        to.style.display = "block"; // Tampilkan elemen yang baru
        gsap.fromTo(
          to,
          { opacity: 0, scale: 0.9 },
          { opacity: 1, scale: 1, duration: 0.5 }
        );
      },
    });
  };

  socket.on("gameReset", () => {
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  });

  // start first quiz

  const submitAnswer = (value, event) => {
    const optionsDiv = document.getElementById("options");

    let btn = optionsDiv.querySelectorAll("button");

    btn.forEach((button) => {
      button.classList.add("disabled");
    });

    const selectedBtn = event.target;
    selectedBtn.classList.remove("btn-secondary");
    selectedBtn.classList.add("btn-light", "text-primary", "border-primary");

    selectedBtn.innerText += ` (${value >= 0 ? "+" : ""}${value}%)`;
    selectedBtn.classList.add(value >= 0 ? "text-green" : "text-red");

    fund += fund * (value / 100);
    console.log(
      `Fund after question: S${formatter.format(
        fund
      )} (calculated from ${value}% adjustment)`
    );
    socket.emit("vote", { teamName: namatim, option: value });
    socket.emit("updatefund", { teamName: namatim, amount: fund });
  };

  socket.on("updateTeams", (Teams) => {
    if (Teams[namatim]) {
      fund = Teams[namatim].fund;

      // Update tampilan fund
      document.getElementById(
        "teamFundDisplay"
      ).innerText = `S${formatter.format(fund)}`;
    }
  });

  socket.on("question", (data) => {
    console.log("question 1", data);

    const questionIndexDiv = document.getElementById("questionIndex");
    questionIndexDiv.innerText = `Scenario : ${data.id}`;
    questionIndexDiv.classList.add("h5", "text-center", "text-white");

    const questionDiv = document.getElementById("question");
    questionDiv.innerHTML = data.question.split(",").join("<br>");
    questionDiv.classList.add("h2", "text-center", "text-white");

    question = data;

    const optionsDiv = document.getElementById("options");
    optionsDiv.innerHTML = "";
    optionsDiv.classList.add(
      "d-flex",
      "flex-row",
      "flex-wrap", // Agar tetap rapi jika opsi terlalu banyak
      "justify-content-center",
      "gap-4",
      "mt-3"
    );

    data.options.forEach((opt, i) => {
      // Buat container untuk gambar dan tombol
      const optionContainer = document.createElement("div");
      optionContainer.classList.add("option-container", "mb-3", "text-center");

      // Buat elemen gambar
      const img = document.createElement("img");
      img.src = opt.image; // Gunakan URL dari JSON
      img.alt = opt.text;
      img.classList.add("img-fluid", "bg-white", "rounded");

      // Buat tombol opsi
      const btn = document.createElement("button");
      btn.innerText = opt.text; // Ambil teks dari objek option
      btn.onclick = (event) => submitAnswer(opt.value, event);

      // Tambahkan class Bootstrap ke tombol
      btn.classList.add("btn", "btn-primary", "w-100");

      // Masukkan gambar dan tombol ke dalam container
      optionContainer.appendChild(img);
      optionContainer.appendChild(btn);

      // Masukkan container ke dalam optionsDiv
      optionsDiv.appendChild(optionContainer);
    });
  });

  socket.on("end", () => {
    const quizElement = document.querySelector(".quiz");
    const endElement = document.querySelector(".end");
    const congratsElement = document.querySelector(".congrats");
    changeSection(quizElement, endElement);

    congratsElement.classList.add("h2", "text-center", "text-white");
    congratsElement.innerText = `Quiz has ended, your final fund is S${formatter.format(
      fund
    )}`;
  });

  socket.on("quizStarted", () => {
    console.log("Event quizStarted diterima!");
    const waitElement = document.querySelector(".wait");
    const quizElement = document.querySelector(".quiz");
    changeSection(waitElement, quizElement);
  });

  // end first quiz

  // start tie breaker question
  let startTime;
  let timerInterval;
  let point = 0;
  let timeElapsed = 0;

  const startTimer = (duration, questionId) => {
    clearInterval(timerInterval);
    let timeLeft = duration;

    // Pastikan elemen timer ada
    let timerDisplay = document.getElementById("timer");
    if (!timerDisplay) {
      timerDisplay = document.createElement("div");
      timerDisplay.id = "timer";
      timerDisplay.classList.add("text-center", "h3");
      document.querySelector(".tiebreaker").prepend(timerDisplay);
    }

    // timerDisplay.innerText = `Time left: ${timeLeft}s`;

    timerInterval = setInterval(() => {
      timeLeft--;
      timeElapsed = timeLeft;
      // timerDisplay.innerText = `Time left: ${timeLeft}s`;
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        console.log("Waktu habis!");
        // socket.emit("timeUp", { questionId, teamName: namatim });
        // Nonaktifkan tombol jawaban saat waktu habis
        // const btns = document.querySelectorAll("#optionstie button");
        // btns.forEach((btn) => btn.classList.add("disabled"));
      }
    }, 10);
  };

  socket.on("TiebreakerStarted", () => {
    console.log("Event TiebreakerStartedStarted diterima!");
    const endElement = document.querySelector(".end");
    const TieBreakerElement = document.querySelector(".tiebreaker");
    changeSection(endElement, TieBreakerElement);
    console.log("harusnya tetap di Tiebreaker!");
  });

  socket.on("questiontie", (data) => {
    console.log("Menerima pertanyaan tie-breaker:", data);
    const questiontieIndexDiv = document.getElementById("questiontieIndex");
    const questiontieDiv = document.getElementById("questiontie");

    questiontieIndexDiv.innerText = `Scenario : ${data.id}`;
    questiontieIndexDiv.classList.add("h3", "text-center", "text-white");

    questiontieDiv.innerText = data.question;
    questiontieDiv.classList.add("h2", "text-center", "text-white");

    question = data;

    const optionstieDiv = document.getElementById("optionstie");
    optionstieDiv.innerHTML = "";
    optionstieDiv.classList.add(
      "d-flex",
      "flex-column",
      "gap-3",
      "align-items-center",
      "mt-3"
    );

    // Simpan jawaban yang benar
    optionstieDiv.dataset.correctAnswer = data.answers;
    startTime = Date.now();

    data.options.forEach((opt, i) => {
      const btn = document.createElement("button");
      btn.innerText = opt.text; // Ambil teks dari objek option
      btn.onclick = () => submitTieBreaker(opt.value, event, data.answers);

      // Tambahkan class Bootstrap ke tombol
      btn.classList.add("btn", "btn-primary", "w-100", "rounded-pill");

      // Tambahkan tombol ke dalam optionsDiv
      optionstieDiv.appendChild(btn);
    });
    let duration = data.durations || 6000; // Default 10 detik jika tidak ada
    startTimer(duration, data.id);
  });

  const submitTieBreaker = (value, event, correctAnswer) => {
    clearInterval(timerInterval);

    const optionsDiv = document.getElementById("optionstie");
    let endTime = Date.now();

    let btn = optionsDiv.querySelectorAll("button");
    btn.forEach((button) => {
      button.classList.add("disabled");
    });

    const selectedBtn = event.target;
    selectedBtn.classList.remove("btn-secondary");
    let isCorrect = value === correctAnswer;
    let maxTime = question.durations || 10; // Gunakan durasi dari JSON
    let timeTaken = isNaN(timeElapsed) ? 100 : timeElapsed;

    if (value === correctAnswer) {
      selectedBtn.classList.add("btn-success"); // Warna hijau jika benar
      point += 100;
      point += Math.round(timeTaken * 0.1);
    } else {
      selectedBtn.classList.add("btn-danger"); // Warna merah jika salah
      point += 50;
      point += Math.round(timeTaken * 0.05);
    }

    console.log(
      `Jawaban dikirim: ${value}, Jawaban benar: ${correctAnswer}, Poin: ${point}, waktu menjawab : ${timeTaken}`
    );

    // 🛠 **Tambahkan log untuk debugging**
    console.log("Mengirim data ke server:", {
      teamName: namatim,
      correct: isCorrect,
      timeTaken: maxTime - timeTaken,
      maxTime,
      point,
    });

    // Kirim poin ke server
    socket.emit("voteTie", { teamName: namatim, option: value });
    socket.emit("updatepoint", {
      teamName: namatim,
      correct: isCorrect,
      timeTaken: maxTime - timeTaken, // Hitung waktu yang digunakan
      maxTime,
      point,
    });
  };

  socket.on("disableOptions", ({ teamName }) => {
    const optionsDiv = document.getElementById("optionstie");
    let btn = optionsDiv.querySelectorAll("button");

    btn.forEach((button) => {
      button.classList.add("disabled");
    });

    console.log(`Opsi untuk tim ${teamName} dinonaktifkan.`);
  });

  socket.on("endtie", () => {
    const quizTieElement = document.querySelector(".tiebreaker");
    const endTieElement = document.querySelector(".endtie");
    const congratsTieElement = document.querySelector(".congratstie");
    changeSection(quizTieElement, endTieElement);

    congratsTieElement.classList.add("h2", "text-center", "text-white");
    congratsTieElement.innerText = `Quiz has ended, your final point is ${point}`;
  });

  // end tie breaker question
</script>

<%- include('../partials/client/footer') %>
