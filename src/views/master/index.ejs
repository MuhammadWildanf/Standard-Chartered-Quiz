<%- include('../partials/master/header') %>
<main>
  <div class="container d-flex flex-column align-items-center mt-5 gap-3">
    <img src="/assets/GetreadyMaster.svg" alt="" class="img-fluid" />
    <!-- <h1 class="text-white">Get Ready for Portfolio Game</h1> -->
    <h5 class="text-white" id="questionIndex">Wait until all participants are ready</h5>
    <div class="d-flex justify-content-start align-items-start gap-3">
      <button
        type="button"
        class="btn btn-primary start"
        style="border-radius: 50px"
        onclick="startQuiz()"
      >
        Start Question
      </button>
      <button
        type="button"
        class="btn btn-success text-white NextQuestion"
        style="border-radius: 50px; display: none"
        onclick="NextQuestion()"
      >
        Next Question
      </button>
      <button
        type="button"
        class="btn btn-danger text-white resetGame"
        style="border-radius: 50px"
        onclick="resetGame()"
      >
        Reset Game
      </button>
      <button
        type="button"
        class="btn btn-primary text-white NextQuiz"
        style="border-radius: 50px; display: none"
        onclick="NextQuiz()"
      >
        Tie Breaker Quiz
      </button>
      <button
        type="button"
        class="btn btn-warning text-white NextQuestion2"
        style="border-radius: 50px; display: none"
        onclick="NextQuestion2()"
      >
        Next Question
      </button>
    </div>
    <div class="col-md-12 d-flex flex-wrap justify-content-center gap-2 mt-3">
      <button type="button" class="btn btn-primary SwitchButton" style="display: none;">
        Switch to Leaderboard
      </button>
      <button type="button" class="btn btn-success SwitchButtonTie" style="display: none;">
        Switch to Leaderboard
      </button>
    </div>
    <div class="w-75 mt-3">
      <h2 class="text-center text-white">Team Lists</h2>
      <p class="total-join text-white text-center fs-4">
        <span id="joined-count" class="fw-bold fs-3">0</span> Teams Joined
      </p>
      <div id="list-tim" class="row g-3 justify-content-center"></div>
    </div>
  </div>
</main>

<script>
  let currentIndex = 0;
  let tieBreakerIndex = 0;
  let isLeaderboard = false;

  const socket = io("wss://scpvbportfoliogame.com/", {
  // const socket = io("http://192.168.88.116:3000", {
    transports: ["websocket"],
    query: {
      userId: "admin123", // ID tetap
      role: "admin",
    },
  });

  const formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: "SGD",
    currencyDisplay: "symbol",
  });

  const resetGame = () => {
    Swal.fire({
      title: "Are you sure?",
      text: "All data will be deleted!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, reset it!",
    }).then((result) => {
      if (result.isConfirmed) {
        socket.emit("resetGame");

        // Reload halaman setelah game di-reset
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    });
  };

  // start first quiz

  const StartQuestion = (idx) => {
    socket.emit("getQuestion", idx);
    socket.emit("getQuestionInleaderboard", idx);
  };

  document.querySelector(".SwitchButton").addEventListener("click", () => {
    const switchButton = document.querySelector(".SwitchButton");

    if(isLeaderboard) {
      socket.emit("switchMode", "question");
      isLeaderboard = false;
      switchButton.innerHTML = "Switch to Leaderboard";
    } else {
      socket.emit("switchMode", "leaderboard");
      isLeaderboard = true;
      switchButton.innerHTML = "Switch to Question";
    } 
  });

  document.querySelector(".SwitchButtonTie").addEventListener("click", () => {
    const SwitchButtonTie = document.querySelector(".SwitchButtonTie");

    if(isLeaderboard) {
      socket.emit("switchTieBreaker", "questionTieBreaker");
      isLeaderboard = false;
      SwitchButtonTie.innerHTML = "Switch to Leaderboard";
    } else {
      socket.emit("switchTieBreaker", "leaderboardTieBreaker");
      isLeaderboard = true;
      SwitchButtonTie.innerHTML = "Switch to Question";
    } 
  });

  function animateCount(element, start, end, duration) {
    let range = end - start;
    let current = start;
    let increment = range / (duration / 10);

    let timer = setInterval(() => {
      current += increment;
      if (current >= end) {
        clearInterval(timer);
        current = end;
      }
      element.textContent = Math.floor(current);
    }, 10);
  }

  socket.on("TeamLeave", (namatim) => {
    console.log(`${namatim} left`);
    const listTim = document.getElementById("list-tim");
    const itemToRemove = Array.from(listTim.children).find(
      (div) => div.getAttribute("data-team") === namatim
    );
    if (itemToRemove) {
      listTim.removeChild(itemToRemove);
    }

    // Update jumlah tim yang join
    let joinedCountElement = document.getElementById("joined-count");
    let joinedTeams = Number(joinedCountElement.textContent) - 1; // Kurangi 1 karena ada tim keluar
    joinedTeams = Math.max(joinedTeams, 0); // Pastikan tidak negatif

    animateCount(
      joinedCountElement,
      Number(joinedCountElement.textContent),
      joinedTeams,
      1000
    );

    fetch("/updatetim", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ teamName: namatim }),
    })
      .then((response) => response.json())
      .then((data) => console.log(data))
      .catch((error) => console.error("Error:", error));
  });

  socket.on("startFailed", (message) => {
    alert(message);
  });

  socket.on("updateTeams", (Teams) => {
    console.log("Updated teams:", Teams);
    const listTim = document.getElementById("list-tim");
    listTim.innerHTML = "";

    let totalTeams = 30;
    let joinedTeams = Object.keys(Teams).length;
    let joinedCountElement = document.getElementById("joined-count");

    animateCount(
      joinedCountElement,
      Number(joinedCountElement.textContent),
      joinedTeams,
      1000
    );

    const startBtn = document.querySelector(".start");
    startBtn.disabled = joinedTeams < 1;

    for (let id in Teams) {
      const div = document.createElement("div");
      const fund = formatter.format(Teams[id].fund);
      div.className = "col-md-4 text-center p-2";
      div.setAttribute("data-team", Teams[id].name);
      div.innerHTML = `<div class="p-2 border rounded bg-primary" style="font-weight: 600; font-size: 20px; color: white;">Team ${Teams[id].name}<br>S${fund}</div>`;
      listTim.appendChild(div);
    }
  });

  const startQuiz = () => {
    const joinedCountElement = document.getElementById("joined-count");
    let joinedTeams = Number(joinedCountElement.textContent);

    if (joinedTeams < 1) {
      Swal.fire({
        title: "Not enough teams!",
        text: "At least 30 teams must join to start.",
        icon: "error",
      });
      return;
    }

    socket.emit("startQuiz");
    const startBtn = document.querySelector(".start");
    startBtn.style.display = "none";
    const SwitchButton = document.querySelector(".SwitchButton");
    SwitchButton.style.display = "inline-block";
    StartQuestion(currentIndex);
  };

  socket.on("quizStarted", () => {
    document.querySelector(".NextQuestion").style.display = "inline-block";
  });

  socket.on("end", () => {
    const questionIndexDiv = document.getElementById("questionIndex");
    questionIndexDiv.innerText = "Quiz Was ended";
    const NextQuizElement = document.querySelector(".NextQuiz");
    NextQuizElement.style.display = "block";

    const NextQuestionElement = document.querySelector(".NextQuestion");
    NextQuestionElement.style.display = "none";

    const SwitchButton = document.querySelector(".SwitchButton");
    SwitchButton.style.display = "none";
  });

  socket.on("question", (data) => {
    console.log("question 1", data);
    const questionIndexDiv = document.getElementById("questionIndex");
    questionIndexDiv.innerText = `Scenario : ${data.id}`;
  });

  // end first quiz

  //start tiebreaker question

  const NextQuestion = () => {
    currentIndex++;
    StartQuestion(currentIndex);
  };

  const StartQuestionTieBreaker = (idx) => {
    socket.emit("getQuestion2", idx);
    socket.emit("getQuestion2Inleaderboard", idx);
  };

  socket.on("TiebreakerStarted", () => {
    document.querySelector(".NextQuestion2").style.display = "inline-block";
  });

  const NextQuestion2 = () => {
    tieBreakerIndex++;
    StartQuestionTieBreaker(tieBreakerIndex);
  };

  /**
   * Button untuk memulai tie-breaker quiz
   * Mengirimkan event "startTieBreakerQuiz" ke server
   * Menyembunyikan tombol "Next Quiz" dan "Next Question"
   * Memulai tie-breaker quiz dengan index yang saat ini
   */
  const NextQuiz = () => {
    console.log("button tie-breaker question");
    socket.emit("startTieBreakerQuiz");
    const NextQuizBtn = document.querySelector(".NextQuiz");
    NextQuizBtn.style.display = "none";
    const NextQestionBtn = document.querySelector(".NextQuestion");
    NextQestionBtn.style.display = "none";
    NextQuizBtn.style.display = "none";
    const NextQestion2Btn = document.querySelector(".NextQuestion2");
    NextQestion2Btn.style.display = "block";
    const SwitchButtonTie = document.querySelector(".SwitchButtonTie");
    SwitchButtonTie.style.display = "block";
    StartQuestionTieBreaker(tieBreakerIndex);

  };
</script>

<%- include('../partials/master/footer') %>
