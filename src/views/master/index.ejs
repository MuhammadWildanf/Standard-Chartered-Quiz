<%- include('../partials/master/header') %>
<main>
  <div class="container d-flex flex-column align-items-center mt-5 gap-3">
    <h1 class="text-white">Get Ready for Portfolio Game</h1>
    <p class="text-white">Wait until all participants are ready</p>
    <button
      type="button"
      class="btn btn-primary start"
      style="border-radius: 50px"
      onclick="startQuiz()"
    >
      Start Question
    </button>
    <button
      type="button"
      class="btn btn-danger reset"
      style="border-radius: 50px"
      onclick="reset()"
    >
      Reset Quiz
    </button>
    <div class="w-75 mt-3">
      <h2 class="text-center text-white">Team Lists</h2>
      <p class="total-join text-white text-center fs-4">
        <span id="joined-count" class="fw-bold fs-3">0</span> / 30
        Teams Joined
      </p>
      <div id="list-tim" class="row g-3 justify-content-center"></div>
    </div>
  </div>
</main>

<script>
  let currentIndex = 0;
  const StartQuestion = (idx) => {
    socket.emit("getQuestion", idx);
    socket.emit("getQuestionInleaderboard", idx);
  };

  const socket = io("http://localhost:3000", {
    query: {
      userId: "admin123", // ID tetap
      role: "admin",
    },
  });

  const formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: "SGD",
    currencyDisplay: "symbol",
  });

  function animateCount(element, start, end, duration) {
    let range = end - start;
    let current = start;
    let increment = range / (duration / 10);

    let timer = setInterval(() => {
      current += increment;
      if (current >= end) {
        clearInterval(timer);
        current = end;
      }
      element.textContent = Math.floor(current);
    }, 10);
  }

  // Menghapus tim saat keluar
  socket.on("TeamLeave", (namatim) => {
    console.log(`${namatim} left`);
    const listTim = document.getElementById("list-tim");
    const itemToRemove = Array.from(listTim.children).find(
      (div) => div.getAttribute("data-team") === namatim
    );
    if (itemToRemove) {
      listTim.removeChild(itemToRemove);
    }

    // Update jumlah tim yang join
    let joinedCountElement = document.getElementById("joined-count");
    let joinedTeams = Number(joinedCountElement.textContent) - 1; // Kurangi 1 karena ada tim keluar
    joinedTeams = Math.max(joinedTeams, 0); // Pastikan tidak negatif

    animateCount(
      joinedCountElement,
      Number(joinedCountElement.textContent),
      joinedTeams,
      1000
    );

    fetch("/updatetim", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ teamName: namatim }),
    })
      .then((response) => response.json())
      .then((data) => console.log(data))
      .catch((error) => console.error("Error:", error));
  });

  socket.on("question", (data) => {
    let duration = data.durations;
    const timer = document.querySelector(".timer");

    startTimer(duration, timer);
  });

  socket.on("updateTeams", (Teams) => {
    console.log("Updated teams:", Teams);
    const listTim = document.getElementById("list-tim");
    listTim.innerHTML = "";

    let totalTeams = 30;
    let joinedTeams = Object.keys(Teams).length;
    let joinedCountElement = document.getElementById("joined-count");

    animateCount(
      joinedCountElement,
      Number(joinedCountElement.textContent),
      joinedTeams,
      1000
    );

    for (let id in Teams) {
      const div = document.createElement("div");
      const fund = formatter.format(Teams[id].fund);
      div.className = "col-md-4 text-center p-2";
      div.setAttribute("data-team", Teams[id].name);
      div.innerHTML = `<div class="p-2 border rounded bg-light" style="font-weight: 600; font-size: 20px;">${Teams[id].name}<br>S${fund}</div>`;
      listTim.appendChild(div);
    }
  });

  // socket.on("resetData" , () => {
  //   const startBtn = document.querySelector(".start");
  //   startBtn.style.display = "block";

  //   const listTim = document.getElementById("list-tim");
  //   listTim.innerHTML = ""; // Clear team list
  // })

  const startQuiz = () => {
    socket.emit("startQuiz");

    const startBtn = document.querySelector(".start");
    startBtn.style.display = "none";

    StartQuestion(currentIndex);
  };

  const reset = () => {
    if (confirm("Are you sure you want to reset the quiz?")) {
      socket.emit("reset");
    }
  };

  const startTimer = (duration, timer) => {
    let waktu = duration;

    const updateTimer = () => {
      timer.textContent = waktu;
      if (waktu <= 0) {
        clearInterval(timerr);
        timer.textContent = "Time's Up!";
        currentIndex += 1;
        console.log(`index  ${currentIndex} saat ini`);
        StartQuestion(currentIndex);
      }
      waktu--;
    };

    let timerr = setInterval(updateTimer, 1000);

    updateTimer();
  };
</script>

<%- include('../partials/master/footer') %>
